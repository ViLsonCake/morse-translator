# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(750, 520)
        font = QtGui.QFont()
        font.setPointSize(16)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color: #2C2829;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.result = QtWidgets.QPushButton(self.centralwidget)
        self.result.setGeometry(QtCore.QRect(90, 450, 181, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.result.setFont(font)
        self.result.setStyleSheet("background-color: #D76970;\n"
"color: #ffffff;\n"
"border-color: #ffffff;\n"
"")
        self.result.setObjectName("result")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(50, 25, 650, 121))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: #52505C;\n"
"color: #ffffff;")
        self.lineEdit.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(480, 450, 181, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: #D76970;\n"
"color: #ffffff;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(80, 205, 210, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton.setFont(font)
        self.radioButton.setStyleSheet("color: #fff;")
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(80, 235, 210, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setStyleSheet("color: #fff;")
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(80, 265, 210, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setStyleSheet("color: #fff;")
        self.radioButton_3.setObjectName("radioButton_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(50, 310, 650, 121))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("background-color: #52505C;\n"
"color: #ffffff;")
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.lineEdit_2.setObjectName("lineEdit_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.button()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Translate to Morse"))
        self.result.setText(_translate("MainWindow", "Конвертировать"))
        self.pushButton_2.setText(_translate("MainWindow", "Очистить"))
        self.radioButton.setText(_translate("MainWindow", "Текст в код Морзе"))
        self.radioButton_2.setText(_translate("MainWindow", "Код Морзе в кириллицу"))
        self.radioButton_3.setText(_translate("MainWindow", "Код Морзе в латиницу"))

    def button(self):
        self.list_value = [0]
        self.pushButton_2.clicked.connect(self.clear)
        self.result.clicked.connect(lambda: self.calculate(value=self.values(), flag=True))
        self.radioButton.clicked.connect(lambda: self.values(1))
        self.radioButton_2.clicked.connect(lambda: self.values(2))
        self.radioButton_3.clicked.connect(lambda: self.values(3))

    def clear(self):
        self.lineEdit.setText('')
        self.lineEdit_2.setText('')

    def calculate(self, value=0, flag=False):

        for i in self.lineEdit.text():
            if i.lower() in 'абвгдежзийклмнопрстуфхцчшщъыьэюя ,./!?':
                self.run = True
            else:
                self.run = False

        if value == 1:
            if self.run:
                self.list1 = []
                self.list1.extend(self.lineEdit.text().upper())
                for i in range(len(self.list1)):
                    for j in dictionary_cyrillic:
                        if self.list1[i] == j:
                            self.list1[i] = dictionary_cyrillic[j][0]

                self.list1 = ' '.join(self.list1)
            else:
                self.list1 = []
                self.list1.extend(self.lineEdit.text().upper())
                for i in range(len(self.list1)):
                    for j in dictionary_latin:
                        if self.list1[i] == j:
                            self.list1[i] = dictionary_latin[j][0]

                self.list1 = ' '.join(self.list1)

        elif value == 2:
            self.flag1 = True
            for i in self.lineEdit.text():
                if i not in '-• ' and i not in '-. ':
                    self.flag1 = False

            if self.flag1:
                self.list2 = self.lineEdit.text().split(' ')

                for i in range(len(self.list2)):
                    for j in dictionary_cyrillic:
                        if self.list2[i] == dictionary_cyrillic[j][0] or self.list2[i] == dictionary_cyrillic[j][1]:
                            self.list2[i] = j

                self.list2 = ' '.join(self.list2)
                while '   ' in self.list2:
                    self.list2 = self.list2.replace('   ', '`')

                while ' ' in self.list2:
                    self.list2 = self.list2.replace(' ', '')

                while '`' in self.list2:
                    self.list2 = self.list2.replace('`', ' ')

                self.lineEdit_2.setText(self.list2)
            else:
                self.lineEdit_2.setText('Некорректный ввод')
        elif value == 3:
            self.flag1 = True
            for i in self.lineEdit.text():
                if i not in '-• ' and i not in '-. ':
                    self.flag1 = False

            if self.flag1:
                self.list2 = self.lineEdit.text().split(' ')

                for i in range(len(self.list2)):
                    for j in dictionary_latin:
                        if self.list2[i] == dictionary_latin[j][0] or self.list2[i] == dictionary_latin[j][1]:
                            self.list2[i] = j

                self.list2 = ' '.join(self.list2)
                while '   ' in self.list2:
                    self.list2 = self.list2.replace('   ', '`')

                while ' ' in self.list2:
                    self.list2 = self.list2.replace(' ', '')

                while '`' in self.list2:
                    self.list2 = self.list2.replace('`', ' ')

                self.lineEdit_2.setText(self.list2)
            else:
                self.lineEdit_2.setText('Некорректный ввод')

        if flag and value == 1:
            self.lineEdit_2.setText(self.list1)

    def values(self, number=0):
        if number != 0:
            self.list_value.append(number)

        return self.list_value[-1]


if __name__ == "__main__":
    import sys
    from main import dictionary_cyrillic
    from main import dictionary_latin
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
